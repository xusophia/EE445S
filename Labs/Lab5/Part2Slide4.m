clc

B = [-0.000000000000, -0.000033582004,-0.000136474727,-0.000308833079,-0.000546510297, ...
-0.000840973030,-0.001179451533,	-0.001545332178,	-0.001918787050,-0.002277622464,...	
-0.002598315487,	-0.002857195526,-0.003031717594,	-0.003101765435,	-0.003050916986,...
-0.002867602042,	-0.002546082816,	-0.002087192610,	-0.001498775868,	-0.000795784499,...	
0.000000000000,	0.000860631832,	0.001753047701,0.002640469041,0.003484113327,...
0.004245148669,0.004886808378,0.005376567552,	0.005688272810,	0.005804110066,	...
0.005716294071,0.005428367979,0.004956011471,0.004327271924,	0.003582154434,	0.002771532534,...
0.001955371258,	0.001200286814,	0.000576501030,	0.000154282669,	0.000000000000,	0.000171938108,...
0.000716058867,	0.001661899770,	0.003018818784,	0.004772794986,	0.006883988357,	0.009285246348,	...
0.011881719809,	0.014551716957,	0.017148882213,	0.019505738070,	0.021438574414,	0.022753612632,	...
0.023254313752,	0.022749642866,	0.021063048752,	0.018041870194,	0.013566841298,	0.007561339124,...
-0.000000000000, -0.009083672822,-0.019591076937,-0.031353995654,-0.044132102146,-0.057612731933,...
-0.071413107311,-0.085085121467,-0.098122705972,-0.109971715949,-0.120042175488,-0.127722635086,...
-0.132396306439,-0.133458561073,-0.130335311338,-0.122501737984,...
-0.109500790434,-0.090960865961,-0.066612073542,-0.036300507990,...
0.000000000000,	0.042179132766,	0.089984730925,	0.143021139007,	0.200751449129,...
0.262503724252,	0.327481160422,0.394776023313,0.463387072537,0.532240071723,...
0.600210877438,	0.666150509255,	0.728911530080,	0.787375012945,...
0.840477339891,	0.887236071769,	0.926774145074,	0.958341693249,	0.981334853853,...
0.995311007823,	1.000000000000,	0.995311007823,	0.981334853853,	0.958341693249,...
0.926774145074,	0.887236071769,	0.840477339891,	0.787375012945,	0.728911530080,...
0.666150509255,	0.600210877438,	0.532240071723,	0.463387072537,	0.394776023313,...
0.327481160422,	0.262503724252, 0.200751449129,	0.143021139007,	0.089984730925,...
0.042179132766,	0.000000000000,	-0.036300507990,-0.066612073542,-0.090960865961,...
-0.109500790434,-0.122501737984,-0.130335311338,-0.133458561073,...
-0.132396306439,-0.127722635086,-0.120042175488,-0.109971715949,...
-0.098122705972,-0.085085121467,-0.071413107311,-0.057612731933,...
-0.044132102146,-0.031353995654,-0.019591076937,-0.009083672822,...
-0.000000000000,0.007561339124,	0.013566841298,	0.018041870194,...
0.021063048752,	0.022749642866,	0.023254313752,	0.022753612632,...
0.021438574414,	0.019505738070,	0.017148882213,	0.014551716957,	0.011881719809,...
0.009285246348,	0.006883988357,	0.004772794986,	0.003018818784,	0.001661899770,...
0.000716058867,	0.000171938108,	0.000000000000,	0.000154282669,...
0.000576501030,	0.001200286814,	0.001955371258,	0.002771532534,	0.003582154434,...
0.004327271924,	0.004956011471,	0.005428367979,	0.005716294071,...
0.005804110066,	0.005688272810,	0.005376567552,	0.004886808378,...
0.004245148669,	0.003484113327,	0.002640469041,	0.001753047701,	0.000860631832,	...
0.000000000000,	-0.000795784499,-0.001498775868,-0.002087192610,	...
-0.002546082816,-0.002867602042,-0.003050916986,-0.003101765435,	...
-0.003031717594,-0.002857195526,-0.002598315487,-0.002277622464,	...
-0.001918787050,-0.001545332178,-0.001179451533,-0.000840973030,	...
-0.000546510297,-0.000308833079,-0.000136474727,-0.000033582004,-0.000000000000];

%%  design raised cosine filter
B = rcosdesign(1, 8, 20, 'normal');

%%

T = 2000;
data = [-15000, 15000];
x = zeros(1,8);
samplesPerSymbol = 20;


output = zeros(1,T);
cosine = int32([1 0 -1 0]);
counter = 0;
symbol = 0;

for t = 1:T    
   if counter == 0 
%        symbol = randi([-1,1]); 
        symbol = mod((symbol + 1), 2);
       x(1) = data(symbol+1);
   end 
   y = 0;
   
   for i = 0:7
       y = y + x(i+1) * B(counter + samplesPerSymbol*i + 1);
   end
   
   if counter == (samplesPerSymbol -1)
       counter = -1;
       
       for i = 7:-1:1
           x(i+1) = x(i);
       end
   end
   
   counter = counter + 1;
   
   output(t) = y;  
   
end


prefiltered_output = filter(num_pre_filter, den_pre_filter, output);
squared = prefiltered_output.^2;
recovered_clock = filter(num_bp, den_bp, squared);
yyaxis left
hold on;
stem(1:T, recovered_clock, '.-') % blue 
yyaxis right
stem(1:T, output, '.-') % red

%% Dotting S
